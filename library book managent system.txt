<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Advanced Library Management</title>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
<style>
  :root {
    --bg: #f5f5f5;
    --fg: #333;
    --accent: #6e57e0;
    --card-bg: #fff;
    --shadow: rgba(0,0,0,0.1);
  }
  [data-theme="dark"] {
    --bg: #1e1e2f;
    --fg: #eee;
    --accent: #8a63d2;
    --card-bg: #2a2a3d;
    --shadow: rgba(0,0,0,0.5);
  }
  * { box-sizing: border-box; }
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: var(--bg);
    color: var(--fg);
    display: flex;
    height: 100vh;
    overflow: hidden;
  }
  .sidebar {
    background: var(--card-bg);
    width: 100px;
    display: flex; flex-direction: column; align-items: center;
    padding: 20px 0;
    border-right: 1px solid var(--shadow);
    transition: background 0.3s;
  }
  .sidebar button {
    background: none; border: none; color: var(--fg);
    margin: 15px 0; cursor: pointer; font-size: 18px;
    width: 60px; height: 60px; border-radius: 12px;
    position: relative; transition: background 0.3s;
  }
  .sidebar button.active, .sidebar button:hover {
    background: var(--accent); color: #fff;
  }
  .content {
    flex: 1; display: flex; flex-direction: column;
    padding: 20px; overflow-y: auto;
    background: var(--bg);
  }
  header {
    display: flex; justify-content: space-between;
    align-items: center; margin-bottom: 20px;
  }
  header h1 { margin: 0; font-size: 1.8em; color: var(--accent); }
  #themeToggle {
    background: var(--accent); color: #fff;
    border: none; padding: 8px 12px; border-radius: 8px;
    cursor: pointer; font-size: 0.9em;
    transition: opacity 0.3s;
  }
  #themeToggle:hover { opacity: 0.9; }
  section { display: none; }
  section.active { display: block; }

  form { max-width: 480px; margin-bottom: 30px; }
  label { display: block; margin-bottom: 6px; font-weight: 600; }
  input, select, textarea {
    width: 100%; padding: 12px; margin-bottom: 16px;
    border: 1px solid #ccc; border-radius: 8px;
    background: var(--card-bg); color: var(--fg);
    transition: border-color 0.3s;
  }
  input:focus, select:focus, textarea:focus {
    border-color: var(--accent); outline: none;
  }
  button[type="submit"], #btnLogout {
    background: var(--accent); 
    color: #fff; border: none;
    padding: 12px 20px; border-radius: 20px;
    cursor: pointer; font-size: 1em;
    transition: background 0.3s;
  }
  button[type="submit"]:hover, #btnLogout:hover {
    background: #5741c1;
  }
  .message {
    opacity: 0; pointer-events: none;
    padding: 10px 14px; border-radius: 20px;
    text-align: center; font-weight: 600;
    transition: opacity 0.3s;
    margin-bottom: 20px;
  }
  .message.show { opacity: 1; pointer-events: auto; }
  .message.error { background: #e74c3c; color: #fff; }
  .message.success { background: #2ecc71; color: #fff; }

  #bookSearch {
    margin: 0 auto 20px auto; width: 100%;
    max-width: 480px; padding: 12px;
    border-radius: 20px; border: 1px solid #ccc;
    display: block;
    background: var(--card-bg); color: var(--fg);
  }

  .books-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 24px;
  }
  .book-card {
    background: var(--card-bg);
    border-radius: 16px;
    box-shadow: 0 4px 12px var(--shadow);
    overflow: hidden;
    transform: translateY(0);
    transition: transform 0.3s, box-shadow 0.3s;
    position: relative;
  }
  .book-card:hover {
    transform: translateY(-6px);
    box-shadow: 0 10px 25px var(--shadow);
  }
  .book-cover {
    width: 100%; height: 160px;
    object-fit: cover; filter: blur(8px);
    transition: filter 0.6s;
    background: #ddd;
  }
  .book-cover.loaded { filter: blur(0); }
  .book-info { padding: 16px; }
  .book-info h3 { margin: 0 0 8px; font-size: 1.2em; }
  .book-info p {
    margin: 4px 0;
    font-size: 0.9em;
    color: var(--fg);
  }
  .delete-btn {
    position: absolute; top: 12px; right: 12px;
    background: #e74c3c; border: none;
    color: #fff; padding: 6px 10px;
    border-radius: 10px; cursor: pointer;
    font-size: 0.8em;
    opacity: 0.8;
    transition: opacity 0.3s;
  }
  .delete-btn:hover { opacity: 1; }

  @media (max-width: 600px) {
    .sidebar { display: none; }
    body { flex-direction: column; height: auto; }
    .content { padding: 10px; }
  }
</style>
</head>
<body>
  <div class="sidebar">
    <button id="btnLogin" class="active">Login</button>
    <button id="btnRegister">Register</button>
    <button id="btnLibrary">Library</button>
  </div>
  <div class="content">
    <header>
      <h1>Library Manager</h1>
      <button id="themeToggle">🌙 Dark Mode</button>
    </header>

    <section id="loginSection" class="active">
      <div id="loginMsg" class="message"></div>
      <form id="loginForm">
        <label>Username</label><input id="loginUsername" required />
        <label>Password</label><input id="loginPassword" type="password" required />
        <label><input id="loginShowPassword" type="checkbox" /> Show Password</label>
        <button type="submit">Login</button>
      </form>
    </section>

    <section id="registerSection">
      <div id="registerMsg" class="message"></div>
      <form id="registerForm">
        <label>Username</label><input id="registerUsername" required />
        <label>Email (optional)</label><input id="registerEmail" type="email" />
        <label>Password</label><input id="registerPassword" type="password" minlength="6" required />
        <label>Confirm Password</label><input id="registerConfirmPassword" type="password" minlength="6" required />
        <label><input id="registerShowPassword" type="checkbox" /> Show Passwords</label>
        <button type="submit">Register</button>
      </form>
    </section>

    <section id="librarySection">
      <div id="libraryGreeting"></div>
      <button id="btnLogout">Logout</button>
      <input id="bookSearch" placeholder="Search by title, author, year…" />
      <div id="bookMsg" class="message"></div>
      <form id="bookForm">
        <label>Title*</label><input id="bookTitle" required />
        <label>Author*</label><input id="bookAuthor" required />
        <label>Year*</label><input id="bookYear" type="number" min="1000" max="9999" required />
        <label>ISBN</label><input id="bookISBN" />
        <label>Genre</label><input id="bookGenre" />
        <label>Publisher</label><input id="bookPublisher" />
        <label>Language</label><input id="bookLanguage" />
        <label>Pages</label><input id="bookPages" type="number" min="1" />
        <label>Rating</label><input id="bookRating" type="number" step="0.1" min="1" max="5" />
        <label>Date Added</label><input id="bookDateAdded" type="date" />
        <label>Availability</label>
        <select id="bookAvailability">
          <option>Available</option><option>Checked Out</option>
        </select>
        <label>Description</label><textarea id="bookDescription"></textarea>
        <label>Cover Image URL</label><input id="bookCoverURL" />
        <button type="submit">Add Book</button>
      </form>
      <div class="books-container" id="booksContainer"></div>
    </section>
  </div>

  <script>
    (() => {
      const KEYS = { U: 'libUsers', B: 'libBooks', L: 'libLogged' };
      let users = JSON.parse(localStorage.getItem(KEYS.U)) || [];
      let books = JSON.parse(localStorage.getItem(KEYS.B)) || [];
      let logged = JSON.parse(localStorage.getItem(KEYS.L)) || null;

      const bs = document.querySelectorAll('.sidebar button');
      const [btnLogin, btnRegister, btnLibrary] = bs;
      const btnLogout = document.getElementById('btnLogout');
      const sections = {
        login: document.getElementById('loginSection'),
        register: document.getElementById('registerSection'),
        library: document.getElementById('librarySection')
      };
      const msgs = {
        login: document.getElementById('loginMsg'),
        register: document.getElementById('registerMsg'),
        book: document.getElementById('bookMsg')
      };
      const loginForm = document.getElementById('loginForm');
      const registerForm = document.getElementById('registerForm');
      const bookForm = document.getElementById('bookForm');
      const bookSearch = document.getElementById('bookSearch');
      const booksContainer = document.getElementById('booksContainer');
      const greeting = document.getElementById('libraryGreeting');
      const themeToggle = document.getElementById('themeToggle');

      // theme load
      document.documentElement.setAttribute('data-theme', localStorage.getItem('theme') || '');
      const applyThemeText = () => {
        themeToggle.textContent = document.documentElement.getAttribute('data-theme') ? '☀️ Light Mode' : '🌙 Dark Mode';
      };
      applyThemeText();

      themeToggle.onclick = () => {
        const cur = document.documentElement.getAttribute('data-theme');
        const nxt = cur ? '' : 'dark';
        document.documentElement.setAttribute('data-theme', nxt);
        localStorage.setItem('theme', nxt);
        applyThemeText();
      };

      const show = (el,msg,err=false) => {
        el.className = `message ${err?'error':'success'} show`;
        el.textContent = msg;
        setTimeout(() => el.className = 'message', 3000);
      };
      const clearAll = () => Object.values(msgs).forEach(m => { m.className='message'; m.textContent=''; });

      function renderSection(sec) {
        Object.entries(sections).forEach(([k,el]) => {
          el.classList.toggle('active', k === sec);
          bs.forEach(b => b.classList.toggle('active', b.id === 'btn'+k.charAt(0).toUpperCase()+k.slice(1)));
        });
        clearAll();
      }

      btnLogin.onclick = () => !logged && renderSection('login');
      btnRegister.onclick = () => !logged && renderSection('register');
      btnLibrary.onclick = () => logged && renderSection('library');
      btnLogout.onclick = () => {
        logged = null; localStorage.removeItem(KEYS.L); renderSection('login');
      };

      document.getElementById('loginShowPassword').onchange = e => 
        document.getElementById('loginPassword').type = e.target.checked ? 'text' : 'password';
      document.getElementById('registerShowPassword').onchange = e =>
        [registerForm.registerPassword, registerForm.registerConfirmPassword]
          .forEach(inp => inp.type = e.target.checked ? 'text' : 'password');

      registerForm.onsubmit = e => {
        e.preventDefault(); clearAll();
        const u = registerForm.registerUsername.value.trim();
        const p = registerForm.registerPassword.value;
        const cp= registerForm.registerConfirmPassword.value;
        if (!u || p.length < 6) return show(msgs.register, 'Username & password min 6 chars', true);
        if (p !== cp) return show(msgs.register, 'Passwords don’t match', true);
        if (users.find(x=>x.username.toLowerCase()===u.toLowerCase())) return show(msgs.register,'Taken',true);
        users.push({username: u, email: registerForm.registerEmail.value.trim(), password: p});
        localStorage.setItem(KEYS.U, JSON.stringify(users));
        show(msgs.register, 'Registered! Please login.');
        registerForm.reset();
        setTimeout(() => renderSection('login'), 1500);
      };

      loginForm.onsubmit = e => {
        e.preventDefault(); clearAll();
        const u = loginForm.loginUsername.value.trim();
        const p = loginForm.loginPassword.value;
        const f = users.find(x => x.username.toLowerCase() === u.toLowerCase());
        if (!f || f.password !== p) return show(msgs.login,'Invalid credentials', true);
        logged = f; localStorage.setItem(KEYS.L, JSON.stringify(logged));
        show(msgs.login, `Welcome back, ${f.username}!`);
        loginForm.reset();
        setTimeout(() => { renderSection('library'); renderBooks(); }, 1200);
      };

      function renderBooks(fb) {
        booksContainer.innerHTML = '';
        const arr = fb || books;
        if (!arr.length) {
          booksContainer.innerHTML = '<p style="text-align:center; color:#777; font-style:italic;">No books found.</p>';
          return;
        }
        arr.forEach((b, i) => {
          const card = document.createElement('div'); card.className = 'book-card';
          const img = new Image(); img.className = 'book-cover';
          img.onload = () => img.classList.add('loaded');
          img.onerror = () => img.src = ''; 
          img.src = b.coverURL || '';
          const info = document.createElement('div');
          info.className = 'book-info';
          info.innerHTML = `
            <h3>${highlight(b.title)}</h3>
            <p><strong>Author:</strong> ${highlight(b.author)}</p>
            <p><strong>Year:</strong> ${b.year}</p>
            ${b.genre ? `<p><strong>Genre:</strong> ${highlight(b.genre)}</p>` : ''}
            ${b.rating ? `<p><strong>Rating:</strong> ⭐ ${b.rating}</p>` : ''}
          `;
          const del = document.createElement('button');
          del.className = 'delete-btn'; del.textContent = 'Delete';
          del.onclick = () => {
            if (confirm(`Delete "${b.title}"?`)) {
              books.splice(i,1);
              localStorage.setItem(KEYS.B, JSON.stringify(books));
              renderBooks(filterBooks());
              show(msgs.book, `"${b.title}" deleted`);
            }
          };
          card.append(img, info, del);
          document.getElementById('booksContainer').appendChild(card);
        });
      }

      const filterBooks = () => {
        const q = bookSearch.value.trim().toLowerCase();
        return q ? books.filter(b =>
          b.title.toLowerCase().includes(q) ||
          b.author.toLowerCase().includes(q) ||
          b.year.toString().includes(q) ||
          (b.genre && b.genre.toLowerCase().includes(q))
        ) : books;
      };

      const highlight = text => {
        const q = bookSearch.value.trim();
        return q ? text.replace(new RegExp(`(${q})`, 'gi'), '<mark>$1</mark>') : text;
      };

      bookForm.onsubmit = e => {
        e.preventDefault(); clearAll();
        if (!logged) return show(msgs.book,'Login first', true);
        const t = document.getElementById('bookTitle').value.trim();
        const a = document.getElementById('bookAuthor').value.trim();
        const y = document.getElementById('bookYear').value;
        if (!t || !a || !y) return show(msgs.book,'Title, Author, Year required', true);
        if (books.find(b=>b.title.toLowerCase()===t.toLowerCase())) return show(msgs.book,'Title exists', true);
        const newB = {
          title: t, author: a, year: y,
          isbn: document.getElementById('bookISBN').value.trim(),
          genre: document.getElementById('bookGenre').value.trim(),
          publisher: document.getElementById('bookPublisher').value.trim(),
          language: document.getElementById('bookLanguage').value.trim(),
          pages: document.getElementById('bookPages').value.trim(),
          rating: document.getElementById('bookRating').value.trim(),
          dateAdded: document.getElementById('bookDateAdded').value,
          availability: document.getElementById('bookAvailability').value,
          description: document.getElementById('bookDescription').value.trim(),
          coverURL: document.getElementById('bookCoverURL').value.trim()
        };
        books.push(newB);
        localStorage.setItem(KEYS.B, JSON.stringify(books));
        bookForm.reset();
        renderBooks(filterBooks());
        show(msgs.book, `"${t}" added`);
      };

      bookSearch.oninput = () => renderBooks(filterBooks());

      renderSection(logged ? 'library' : 'login');
      if (logged) renderBooks();
    })();
  </script>
</body>
</html>
